# -*- coding: utf-8 -*-
"""cancer-pred

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-DNdqB4eHItBqDgPGhijTVX71jiiDnlU
"""

import pandas as pd

dataset = pd.read_csv('cancer.csv')

x = dataset.drop(columns=["diagnosis(1=m, 0=b)"])

y = dataset["diagnosis(1=m, 0=b)"]

"""Split the data into a training set and a testing set."""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

"""Build and train the model."""

import tensorflow as tf

model = tf.keras.models.Sequential()

model.add(tf.keras.layers.Dense(256, input_shape=(x_train.shape[1],), activation='sigmoid'))
model.add(tf.keras.layers.Dense(256, activation='sigmoid'))
model.add(tf.keras.layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=1000)

"""Evaluate the model."""

model.evaluate(x_test, y_test)

import json
import numpy as np

json_data1='''
{
    "radius_mean": 13.44,
    "texture_mean": 21.58,
    "perimeter_mean": 86.18,
    "area_mean": 563.0,
    "smoothness_mean": 0.08162,
    "compactness_mean": 0.06031,
    "concavity_mean": 0.0311,
    "concave points_mean": 0.02031,
    "symmetry_mean": 0.1784,
    "fractal_dimension_mean": 0.05587,
    "radius_se": 0.2385,
    "texture_se": 0.8265,
    "perimeter_se": 1.572,
    "area_se": 20.53,
    "smoothness_se": 0.00328,
    "compactness_se": 0.01102,
    "concavity_se": 0.0139,
    "concave points_se": 0.006881,
    "symmetry_se": 0.0138,
    "fractal_dimension_se": 0.001286,
    "radius_worst": 15.93,
    "texture_worst": 30.25,
    "perimeter_worst": 102.5,
    "area_worst": 787.9,
    "smoothness_worst": 0.1094,
    "compactness_worst": 0.2043,
    "concavity_worst": 0.2085,
    "concave points_worst": 0.1112,
    "symmetry_worst": 0.2994,
    "fractal_dimension_worst": 0.07146
}
'''

json_data2='''
{
    "radius_mean": 12.05,
    "texture_mean": 14.63,
    "perimeter_mean": 78.04,
    "area_mean": 449.3,
    "smoothness_mean": 0.1031,
    "compactness_mean": 0.09092,
    "concavity_mean": 0.06592,
    "concave points_mean": 0.02749,
    "symmetry_mean": 0.1675,
    "fractal_dimension_mean": 0.06043,
    "radius_se": 0.2636,
    "texture_se": 0.7294,
    "perimeter_se": 1.848,
    "area_se": 19.87,
    "smoothness_se": 0.005488,
    "compactness_se": 0.01427,
    "concavity_se": 0.02322,
    "concave points_se": 0.00566,
    "symmetry_se": 0.01428,
    "fractal_dimension_se": 0.002422,
    "radius_worst": 13.76,
    "texture_worst": 20.7,
    "perimeter_worst": 89.88,
    "area_worst": 582.6,
    "smoothness_worst": 0.1494,
    "compactness_worst": 0.2156,
    "concavity_worst": 0.305,
    "concave points_worst": 0.06548,
    "symmetry_worst": 0.2747,
    "fractal_dimension_worst": 0.08301
}

'''

data_dict = json.loads(json_data1)
data_array = np.array([list(data_dict.values())])

prediction = model.predict(data_array)
binary_prediction = (prediction > 0.5).astype(int)

print("Prediction (probability):", prediction)
print("Binary Prediction (0 or 1):", binary_prediction)

